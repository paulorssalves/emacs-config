#!/bin/bash

REPODIR=..
EMACSDIR=/home/$USER/.emacs.d/

FILES=( ${REPODIR}/config/config.org
	${REPODIR}/config/org-agenda-config.org
	${REPODIR}/abbrev_defs ) 

# bold and normal type
bold=$(tput bold)
normal=$(tput sgr0)

areyousure() {
    # function to check whether or not the user will replace the files
    TRUE=0
    FALSE=1
    while true; do
	read -p "Você está certo disso? [S/N] " query
	case $( echo ${query:0:1} | awk '{print tolower ($0)}') in
	    "s")
		answer=$TRUE
		break;;
	    "n")
		answer=$FALSE
		break;;
	    *)
		printf "Input inválido\n"
		continue;;
	esac
    done
    return $answer
}

for item in ${FILES[@]}; do

    # para a leitura
    REMOTEFILE=$item
    BASEFILE=$(basename $item)

    if [[ "$item" == *"config"* ]]; then
	LOCALFILE_L=${EMACSDIR}config/$(basename $item)

	diff -s --color=always $LOCALFILE_L $REMOTEFILE
	printf "\n${bold}Lembrete:\n${normal}Linhas iniciando com '>' vem de \"$REMOTEFILE\" (remoto)\nao passo em que as iniciam com '<' vem de \"$LOCALFILE_L\" (local)\n\n"

	while true; do
	    printf "Qual deve ser atualizado: \"$LOCALFILE_L\" (${bold}local${normal}) ou \"$REMOTEFILE\" (${bold}remoto${normal})?\n${bold}Atenção: O selecionado será sobrescrito pelo outro.${normal}\n" 
	    read -p "[L=local/R=remoto/P=pular/S=sair]: " ANSWER 
	    printf "\n"
	    ANSWER_S=${ANSWER:0:1}

	    case $( echo $ANSWER_S | awk '{print tolower($0)}' ) in 

		"r" )
		    areyousure
		    a=$?
		    if [[ $a == 0 ]] ; then
			printf "atualizando \"$BASEFILE\" deste repositório...\n"; 
			cp --verbose $LOCALFILE_L $REMOTEFILE # update remote
			printf "\n"

		    elif [[ $a == 1 ]] ; then
			echo "Entendido. Saindo..."; sleep 1
			exit 1 ;

		    fi
		    break ;;

		"l")
		    areyousure
		    a=$?
		    if [[ $a == 0 ]] ; then
			printf "atualizando \"$BASEFILE\" local...\n";  
			cp --verbose $REMOTEFILE $LOCALFILE_L # update local 
			printf "\n"

		    elif [[ $a == 1 ]] ; then
			echo "Entendido. Saindo..."; sleep 1
			exit 1 ;
		    fi
		    break ;;

		"p")
		    printf "pulando este...\n\n"
		    break ;;

		"s")
		    printf "saindo...\n\n" ; sleep 1
		    exit 1 ;;
		*)
		    printf "\n${bold}Não é uma resposta válida.${normal}\n" 
		    continue ;;
	    esac
	done
    else
	LOCALFILE_L=${EMACSDIR}$(basename $item)
	diff -s --color=always $LOCALFILE_L $REMOTEFILE

	while true ; do
	    printf "Qual deve ser atualizado: \"$LOCALFILE_L\" (${bold}local${normal}) ou \"$REMOTEFILE\" (${bold}remoto${normal})?\n${bold}Atenção: O selecionado será sobrescrito pelo outro.${normal}\n" 
	    read -p "[L=local/R=remoto/P=pular/S=sair]: " ANSWER 
	    ANSWER_S=${ANSWER:0:1}

	    case $( echo $ANSWER_S | awk '{print tolower($0)}' ) in 
		"r")
		    areyousure
		    a=$?
		    if [[ $a == 0 ]] ; then
			printf "atualizando \"$BASEFILE\" deste repositório...\n"; 
			cp --verbose $LOCALFILE_L $REMOTEFILE # update remote
			printf "\n"

		    elif [[ $a == 1 ]] ; then

			echo "Entendido. Saindo..."; sleep 1
			exit 1 ;
		    fi
		    break ;;
		"l")
		    areyousure
		    a=$?
		    if [[ $a == 0 ]] ; then
			printf "atualizando \"$BASEFILE\" local...\n";
			cp --verbose $REMOTEFILE $LOCALFILE_L # update local 
			printf "\n"

		    elif [[ $a == 1 ]] ; then

			echo "Entendido. Saindo..."; sleep 1
			exit 1 ;
		    fi
		    break ;;

		"p")
		    printf "pulando este...\n"
		    break ;;

		"s")
		    printf "saindo...\n" ; sleep 1
		    exit 1 ;;

		*)
		    printf "\n${bold}Não é uma resposta válida.${normal}\n" 
		    continue ;;
	    esac 
	done
    fi
done

echo "Terminado..." ; sleep 1
