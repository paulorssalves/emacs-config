* init
** define current user OS and username
   
#+BEGIN_SRC emacs-lisp 
    (cond
     ((string-equal "windows-nt" system-type)
      (progn
	(setq initial-buffer-choice (format "c:/Users/%s/OneDrive/Documentos/emacs/begin.org" user-login-name))
	(setq package-check-signature nil)
	;; setting proper fonts for windows
	(add-to-list 'default-frame-alist '(font . "Lucida Console-10"))  
	(set-face-attribute 'default t :font "Lucida Console-10")  
	(set-face-attribute 'default nil :font "Lucida Console-10")  
	(set-frame-font "Lucida Console-10" nil t))) 
     ((string-equal "gnu/linux" system-type)
      (progn
	(setq initial-buffer-choice "~/.emacs.d/begin.org") ;; setting proper fonts for linux 
	(add-to-list 'default-frame-alist '(font . "Hack-13"))  
	(set-face-attribute 'default t :font "Hack-13")  
	(set-face-attribute 'default nil :font "Hack-13")  
	(set-frame-font "Hack-13" nil t))))
#+END_SRC

#+RESULTS:

** activate melpa
   #+BEGIN_SRC emacs-lisp
   (require 'package)
   (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
   (package-initialize)
  
   #+END_SRC

   #+RESULTS:

** require and activate packages
   #+BEGIN_SRC emacs-lisp 
     (require 'org-mouse)
     (require 'helm-config)

     ;;javascript 

     (evil-mode 1)
;     (require 'js2-mode)
;     (require 'company)
;     (require 'company-tern)
;     (add-to-list 'company-backends 'company-tern)

   #+END_SRC

* appearance  
** set theme in accordance to the time of day a
   #+BEGIN_SRC emacs-lisp
     (setq hour (string-to-number (format-time-string "%H")))
     (cond ((and (< hour 5) (>= hour 0)) (load-theme 'abyss t))
	   ((and (>= hour 5) (<= hour 17)) (load-theme 'tsdh-light t))
	   ((and (>= hour 18) (<= hour 23)) (load-theme 'tango-dark t)))
     (setq sml/no-confirm-load-theme t)
     (sml/setup)
   #+END_SRC

   #+RESULTS:

** customize emacs' UI 
   things such as removing toolbars and menus
   #+BEGIN_SRC emacs-lisp 
     (global-linum-mode)
     (fringe-mode 0)
     (setq linum-format " %d ")
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
     (show-paren-mode 1)
    #+END_SRC

* org-mode customization 
#+BEGIN_SRC emacs-lisp 
    (add-to-list 'org-file-apps '(directory . emacs))
    (setq org-tag-alist
	  ;;; org tags for to-do lists
	  '(("@home" . ?1)
	    ("rua" . ?2)
	    ("@computer" . ?3)
	    ("urgent" . ?4)
	    ("@CNA" . ?5)
	    ("faculdade" . ?f)
	    ("work" . ?w)
	    ("@cellphone" . ?6)
	    ("programming" . ?p)
	    ("blender" . ?b)
	    ("emacs" . ?e)))

  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda  ()
			       (toggle-word-wrap 1)
			       (org-bullets-mode 1)))
  (setq org-directory "d:/Dropbox/org")
  (setq org-default-notes-file (concat org-directory "/notes.org"))

  (require 'noflet)
  (setq inhibit-compacting-font-caches t)
  (defun make-capture-frame ()
    "Create a new frame and run org-capture."
    (interactive)
    (make-frame '((name . "capture")))
    (select-frame-by-name "capture")
    (delete-other-windows)
    (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
	       (org-capture)))

  (global-set-key (kbd "M-f") 'other-frame)
  (global-set-key (kbd "<f6>") 'make-capture-frame)
#+END_SRC

#+RESULTS:
: make-capture-frame

* major mode hooks
** dired 
#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook (lambda ()
			       (dired-hide-details-mode)))

#+END_SRC
** python
   #+BEGIN_SRC emacs-lisp 
   (add-hook 'python-mode-hook (lambda () (jedi-mode 1)))
   #+END_SRC

** lisps 
#+BEGIN_SRC emacs-lisp
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)

     #+END_SRC
** html and javascript
   #+BEGIN_SRC emacs-lisp
     (require 'web-mode)
        (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
        (add-hook 'web-mode-hook (lambda () (emmet-mode 1)))

     ;   (require 'js2-mode)
     ;   (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
     ;   (add-hook 'js2-mode-hook (lambda ()
     ;                              (tern-mode)
     ;                              (company-mode)
     ;                              (paredit-mode)
     ;                              (electric-pair-mode 1)))
   #+END_SRC
** c/c++ 
   #+BEGIN_SRC emacs-lisp
      (defun c_hook ()
	;; enable irony mode (which I haven't quite learned yet) and automatic curly brackets setting
	 (electric-pair-mode 1)
	 (irony-mode 1))

      (add-hook 'c++-mode-hook 'c_hook) 
      (add-hook 'c-mode-hook 'c_hook)
   #+END_SRC
** Java
   #+BEGIN_SRC emacs-lisp 
     (add-hook 'java-mode-hook (lambda ()
				 (electric-pair-mode 1)))
   #+END_SRC
* functions
** miscellaneous functions
   As fun��es de extens�o do emacs ser�o definidas aqui. Caso sejam interativas, os seus keybindings estar�o localizados no heading "keybindings".
   #+BEGIN_SRC emacs-lisp 
     (defun replace-last-sexp ()
       (interactive)
       (let ((value (eval (preceding-sexp))))
	 (kill-sexp -1)
	 (insert (format "%S" value))))

   #+END_SRC

** package management functions
 #+BEGIN_SRC emacs-lisp

   (defun installed? (pkg)
     ;;; checks if PKG is installed. Returns t if it is, nil otherwise.
     (if (eq (require pkg nil 'noerror) pkg) 't nil))

   (defun install-multiple (pkg-list)
     ;;; install multiple packages at once
     (cond ((consp pkg-list) ;; if pkg-list is a cons  
	    (while pkg-list
	      (if (not (installed? (car pkg-list)))
		  (progn
		    (package-install (car pkg-list))
		    (setq pkg-list (cdr pkg-list)))
		(setq pkg-list (cdr pkg-list )))))
	   ((symbolp pkg-list) ;; if pkg-list is actually a single package
	    (if (not (installed? pkg-list))
	      (package-install pkg-list)))
	   ('t ;; else return an error message
	    (message "You should input a list of packages or a single quoted package"))))

   (defun apackage (pkg)
     ;;; returns actual package as it's found in package-alist 
     (car (cdr (assoc pkg package-alist))))

   (defun delete-multiple (pkg-list)
     ;;; delete multiple packages at once
     (cond ((symbolp pkg-list)
	    (if (installed? pkg-list)
		(package-delete (apackage pkg-list))
	      nil))
	    ((consp pkg-list)
	     (while pkg-list
	       (if (installed? (car pkg-list))
		   (progn
		     (package-delete
		      (apackage (car pkg-list)))
		     (setq pkg-list (cdr pkg-list)))
		 (setq pkg-list (cdr pkg-list)))))
	    ('t nil)))

 #+END_SRC

 #+RESULTS:
 : delete-multiple

here be a proposition for the functions above, rewritten with dolist [[file:c:/Users/User/Desktop/emacs/prop/funcdolist.el][package-managers]]  
* keybindings

  #+BEGIN_SRC emacs-lisp 
    (global-set-key (kbd "M-r") 'replace-last-sexp)
;    (define-key tern-mode-keymap (kbd "M-.") nil)
;    (define-key tern-mode-keymap (kbd "M-,") nil)
  #+END_SRC

* wrapper
#+BEGIN_SRC emacs-lisp 
(defun display-startup-echo-area-message ()
  (message (format "hi, %s! Everything is working as expected. Good to see you." user-login-name)))
#+END_SRC
