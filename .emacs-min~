(cond
 ((string-equal "windows-nt" system-type)
  (progn
    (setq initial-buffer-choice (format "c:/Users/%s/Desktop/emacs/projs/" user-login-name))
    (setq package-check-signature nil)))
 ((string-equal "gnu/linux" system-type)
  (setq initial-buffer-choice "~")))

(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)

(custom-set-variables
 '(package-selected-packages
   (quote
    (irony prettify-symbols prettify-symbols-mode helm paredit paredit-mode evil))))
(custom-set-faces
 )

(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)

(require 'evil)
(evil-mode)

(setq hour (string-to-number (format-time-string "%H")))

(global-linum-mode)
(fringe-mode 0)
(setq linum-format " %d ")

(cond  ((and (<= hour 7) (> hour 0)) (load-theme 'wheatgrass))
       ((and (> hour 7) (<= hour 14)) (load-theme 'leuven))
       ((and (> hour 14) (<= hour 23)) (load-theme 'tango-dark)))

;;;; useful functions
(defun instpkgs (pkgs) ; install many packages at once
  (while pkgs
    (package-install (car pkgs))
    (setq pkgs (cdr pkgs))))

;; functions
(defun c_hook ()
    (electric-pair-mode 1)
    (irony-mode 1))

(add-hook 'c++-mode-hook 'c_hook) 
(add-hook 'c-mode-hook 'c_hook)
(add-hook 'python-mode-hook (lambda () (jedi-mode 1)))

(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
(add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
(add-hook 'ielm-mode-hook #'enable-paredit-mode)
(add-hook 'lisp-mode-hook #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)

;; if everything's working just fine
(defun display-startup-echo-area-message ()
  (message (format "hi, %s! Everything is working as expected. Good to see you." user-login-name)))
